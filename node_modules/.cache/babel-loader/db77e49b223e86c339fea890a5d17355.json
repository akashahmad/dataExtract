{"ast":null,"code":"import _slicedToArray from \"/Users/brohik/repo/adaptive-data-file-extract/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/brohik/repo/adaptive-data-file-extract/src/components/Select/index.js\";\nimport React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport moment from \"moment\";\nimport { inject, observer } from \"mobx-react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { STORE_KEYS } from \"@/stores\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"100%\"\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nfunction SelectItem({\n  name,\n  options,\n  setPostQuery,\n  setFlag,\n  getDataFromServer,\n  setOptions,\n  postQuery,\n  disabled\n}) {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(\"\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        value = _React$useState2[0],\n        setValue = _React$useState2[1];\n\n  const handleChange = async e => {\n    setValue(e.target.value);\n\n    if (getDataFromServer) {\n      let newFromDate, newToDate;\n\n      if (postQuery.fromDate && postQuery.toDate) {\n        newFromDate = moment(postQuery.fromDate).format(\"MM.DD.YYYY\");\n        newToDate = moment(postQuery.toDate).format(\"MM.DD.YYYY\");\n      }\n\n      const data = await getDataFromServer(e.target.value, newFromDate, newToDate);\n      setOptions(data);\n    }\n\n    if ((name === \"Grade\" || name === \"Test\") && e.target.value !== \" \") {\n      setFlag(true);\n    } else if (e.target.value === \" \") {\n      setFlag(false);\n    }\n\n    setPostQuery(name.toLowerCase(), e.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"label-\".concat(name),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Data by \".concat(name)), React.createElement(Select, {\n    labelId: \"label-\".concat(name),\n    id: name,\n    value: value,\n    onChange: handleChange,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, options.map(option => React.createElement(MenuItem, {\n    key: option.name,\n    value: option.value === null ? option.name : option.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, option.name)))));\n}\n\nexport default compose(inject(STORE_KEYS.VIEWMODESTORE), observer, withProps(({\n  [STORE_KEYS.VIEWMODESTORE]: {\n    setPostQuery,\n    postQuery\n  }\n}) => ({\n  setPostQuery,\n  postQuery\n})))(SelectItem);","map":{"version":3,"sources":["/Users/brohik/repo/adaptive-data-file-extract/src/components/Select/index.js"],"names":["React","compose","withProps","moment","inject","observer","makeStyles","InputLabel","MenuItem","FormControl","Select","STORE_KEYS","useStyles","theme","formControl","margin","spacing","width","selectEmpty","marginTop","SelectItem","name","options","setPostQuery","setFlag","getDataFromServer","setOptions","postQuery","disabled","classes","useState","value","setValue","handleChange","e","target","newFromDate","newToDate","fromDate","toDate","format","data","toLowerCase","map","option","VIEWMODESTORE"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport moment from \"moment\";\nimport { inject, observer } from \"mobx-react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { STORE_KEYS } from \"@/stores\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"100%\"\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  }\n}));\n\nfunction SelectItem({\n  name,\n  options,\n  setPostQuery,\n  setFlag,\n  getDataFromServer,\n  setOptions,\n  postQuery,\n  disabled\n}) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(\"\");\n  const handleChange = async e => {\n    setValue(e.target.value);\n    if (getDataFromServer) {\n      let newFromDate, newToDate;\n      if (postQuery.fromDate && postQuery.toDate) {\n        newFromDate = moment(postQuery.fromDate).format(\"MM.DD.YYYY\");\n        newToDate = moment(postQuery.toDate).format(\"MM.DD.YYYY\");\n      }\n      const data = await getDataFromServer(\n        e.target.value,\n        newFromDate,\n        newToDate\n      );\n      setOptions(data);\n    }\n    if ((name === \"Grade\" || name === \"Test\") && e.target.value !== \" \") {\n      setFlag(true);\n    } else if (e.target.value === \" \") {\n      setFlag(false);\n    }\n\n    setPostQuery(name.toLowerCase(), e.target.value);\n  };\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel id={`label-${name}`}>{`Data by ${name}`}</InputLabel>\n        <Select\n          labelId={`label-${name}`}\n          id={name}\n          value={value}\n          onChange={handleChange}\n          disabled={disabled}\n        >\n          {options.map(option => (\n            <MenuItem\n              key={option.name}\n              value={option.value === null ? option.name : option.value}\n            >\n              {option.name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n\nexport default compose(\n  inject(STORE_KEYS.VIEWMODESTORE),\n  observer,\n  withProps(({ [STORE_KEYS.VIEWMODESTORE]: { setPostQuery, postQuery } }) => ({\n    setPostQuery,\n    postQuery\n  }))\n)(SelectItem);\n"]},"metadata":{},"sourceType":"module"}