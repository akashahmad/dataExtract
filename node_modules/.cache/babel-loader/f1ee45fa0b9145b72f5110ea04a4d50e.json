{"ast":null,"code":"import _defineProperty from \"/Users/brohik/repo/adaptive-data-file-extract/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { decorate, observable, action, configure } from \"mobx\";\nimport axios from \"axios\";\nimport { getFilterOptionsBuilding, getFilterOptionsDistrict, getFilterOptionsClass, getCSVFile } from \"@/stores/wrd_apis\";\n\nclass ViewModeStore {\n  constructor() {\n    this.optBuildings = [];\n    this.isBdSet = false;\n    this.optDistricts = [];\n    this.isDsSet = false;\n    this.optEvents = [];\n    this.isEvSet = false;\n    this.optGrades = [];\n    this.optClasses = [];\n    this.isClSet = false;\n    this.optStudents = [];\n    this.isStSet = false;\n    this.postQuery = {};\n    this.errorData = [];\n    this.isGradeSelected = false;\n    this.isEventSelected = false;\n    this.isBuildingsSelected = false;\n    this.isDistrictSelected = false;\n    this.isClassSelected = false;\n    this.isTestSelected = false;\n    this.isEmptyData = false;\n    this.isConnectionError = false;\n\n    this.setIsTestSelected = value => {\n      this.isTestSelected = value;\n    };\n\n    this.setIsEventSelected = value => {\n      this.isEventSelected = value;\n    };\n\n    this.setIsGradeSelected = value => {\n      this.isGradeSelected = value;\n    };\n\n    this.setIsBuildingsSelected = value => {\n      this.isBuildingsSelected = value;\n    };\n\n    this.setIsDistrictSelected = value => {\n      this.isDistrictSelected = value;\n    };\n\n    this.setIsClassSelected = value => {\n      this.isClassSelected = value;\n    };\n\n    this.setEmptyData = condition => {\n      this.isEmptyData = condition;\n    };\n\n    this.getDownloadFile = async (data, setIsLoading) => {\n      const URL = \"https://adaptive-file-extract-api-prod.rcs.rsiapps.com/adaptive/v1/research?\";\n      const checkingUrlData = \"https://adaptive-file-extract-api-prod.rcs.rsiapps.com/adaptive/v1/research/count\";\n      axios.get(checkingUrlData, {}).then(res => {\n        console.log(\"res\", res);\n\n        if (res.data > 0) {\n          this.downloadFile(setIsLoading, URL, data);\n        } else {\n          console.log(\"No Record found of given search\");\n          this.setEmptyData(true);\n        }\n      }).catch(err => {\n        this.setEmptyData(true);\n        console.log(\"ERR\", err);\n      });\n    };\n\n    /*defaultConnection()\n    .then(res => {\n        if(res){\n        console.log(\"RES--\", res)\n            //return res.message\n        } else {\n            this.getData;\n        }\n    })\n    .catch(err => {\n    console.log(\"ERR--\",err)\n    //this.isConnectionError = true\n    //this.errorData.push(\"service is down\")\n    })\n    */\n    getFilterOptionsDistrict().then(options => {\n      let districts = [];\n\n      for (let i = 0; i < options.length; i++) {\n        this.optDistricts.push(options[i] || \"\");\n      }\n\n      this.isDsSet = true;\n      const buildings = options.map(item => item.id);\n      getFilterOptionsBuilding(buildings.join(\",\")).then(options => {\n        for (let i = 0; i < options.length; i++) {\n          this.optBuildings.push(options[i] || \"\");\n        }\n\n        this.isBdSet = true;\n        const classes = options.map(item => item.id);\n        getFilterOptionsClass(classes.join(\",\")).then(options => {\n          for (let i = 0; i < options.length; i++) {\n            this.optClasses.push(options[i] || \"\");\n          }\n\n          this.isClSet = true;\n        });\n      });\n    }); // student\n    //getFilterOptions('student')\n    //.then(options => {\n    //for (let i = 0; i < options.length; i++) {\n    // this.optStudents.push(options[i].name || '');\n    //}\n    // this.isStSet = true;\n    // });\n    // }\n  }\n\n  setDistrictsOpt(value) {\n    this.optDistricts = [...value];\n  }\n\n  setEventsOpt(value) {\n    this.optEvents = [...value];\n  }\n\n  setGradesOpt(value) {\n    this.optGrades = [...value];\n  }\n\n  setPostQuery(name, value) {\n    this.postQuery = _objectSpread({}, this.postQuery, {\n      [name]: value\n    });\n  }\n\n  setBuildingOpt(value) {\n    this.optBuildings = [...value];\n  }\n\n  setClassesOpt(value) {\n    this.optClassessetPostQuery = _objectSpread({}, this.postQuery, {\n      [name]: value\n    });\n  }\n\n  downloadFile(setIsLoading, URL, data) {\n    console.log(\"\".concat(URL).concat(data));\n    const URI = !data ? URL : \"\".concat(URL).concat(data);\n    axios.get(URI, {}).then(res => {\n      if (res) {\n        console.log(\"res\", res);\n        window.location.href = \"\".concat(URL).concat(data);\n        console.log(\"href\");\n        return res;\n      }\n    }).then(res => {\n      //console.log(\"data\", data)\n      //window.open(`${URL}${data}`, \"_blanc\");\n      //window.location.href = URL;\n      console.log(\"res2\", res);\n    }).catch(err => console.log(\"err\", err)).finally(() => {\n      //window.open(URI, \"_blanc\");\n      console.log(\"finally\");\n      setIsLoading(false);\n    });\n  }\n\n}\n\ndecorate(ViewModeStore, {\n  optBuildings: observable,\n  isBdSet: observable,\n  optDistricts: observable,\n  isDsSet: observable,\n  optEvents: observable,\n  setGradesOpt: action.bound,\n  optGrades: observable,\n  isEvSet: observable,\n  optClasses: observable,\n  isClSet: observable,\n  optStudents: observable,\n  isStSet: observable,\n  postQuery: observable,\n  isTestSelected: observable,\n  isDistrictSelected: observable,\n  isBuildingsSelected: observable,\n  isGradeSelected: observable,\n  isEventSelected: observable,\n  getDownloadFile: action,\n  setBuildingOpt: action.bound,\n  setDistrictsOpt: action.bound,\n  setEventsOpt: action.bound,\n  setIsEventsSelected: action.bound,\n  setClassesOpt: action.bound,\n  setPostQuery: action.bound,\n  setIsBuildingsSelected: action.bound,\n  setIsTestSelected: action.bound,\n  setIsEventSelected: action.bound,\n  setIsDistrictSelected: action.bound,\n  setIsGradeSelected: action,\n  isEmptyData: observable,\n  setEmptyData: action.bound //isConnectionError: observable,\n  //errorData: action.bound\n\n});\nexport default (() => new ViewModeStore());","map":{"version":3,"sources":["/Users/brohik/repo/adaptive-data-file-extract/src/stores/ViewModeStore.js"],"names":["decorate","observable","action","configure","axios","getFilterOptionsBuilding","getFilterOptionsDistrict","getFilterOptionsClass","getCSVFile","ViewModeStore","constructor","optBuildings","isBdSet","optDistricts","isDsSet","optEvents","isEvSet","optGrades","optClasses","isClSet","optStudents","isStSet","postQuery","errorData","isGradeSelected","isEventSelected","isBuildingsSelected","isDistrictSelected","isClassSelected","isTestSelected","isEmptyData","isConnectionError","setIsTestSelected","value","setIsEventSelected","setIsGradeSelected","setIsBuildingsSelected","setIsDistrictSelected","setIsClassSelected","setEmptyData","condition","getDownloadFile","data","setIsLoading","URL","checkingUrlData","get","then","res","console","log","downloadFile","catch","err","options","districts","i","length","push","buildings","map","item","id","join","classes","setDistrictsOpt","setEventsOpt","setGradesOpt","setPostQuery","name","setBuildingOpt","setClassesOpt","optClassessetPostQuery","URI","window","location","href","finally","bound","setIsEventsSelected"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,MAA/B,EAAuCC,SAAvC,QAAwD,MAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,qBAHF,EAIEC,UAJF,QAKO,mBALP;;AAOA,MAAMC,aAAN,CAAoB;AAsClBC,EAAAA,WAAW,GAAG;AAAA,SArCdC,YAqCc,GArCC,EAqCD;AAAA,SApCdC,OAoCc,GApCJ,KAoCI;AAAA,SAlCdC,YAkCc,GAlCC,EAkCD;AAAA,SAjCdC,OAiCc,GAjCJ,KAiCI;AAAA,SA/BdC,SA+Bc,GA/BF,EA+BE;AAAA,SA9BdC,OA8Bc,GA9BJ,KA8BI;AAAA,SA5BdC,SA4Bc,GA5BF,EA4BE;AAAA,SA1BdC,UA0Bc,GA1BD,EA0BC;AAAA,SAzBdC,OAyBc,GAzBJ,KAyBI;AAAA,SAvBdC,WAuBc,GAvBA,EAuBA;AAAA,SAtBdC,OAsBc,GAtBJ,KAsBI;AAAA,SApBdC,SAoBc,GApBF,EAoBE;AAAA,SAlBdC,SAkBc,GAlBF,EAkBE;AAAA,SAhBdC,eAgBc,GAhBI,KAgBJ;AAAA,SAddC,eAcc,GAdI,KAcJ;AAAA,SAZdC,mBAYc,GAZQ,KAYR;AAAA,SAVdC,kBAUc,GAVO,KAUP;AAAA,SARdC,eAQc,GARI,KAQJ;AAAA,SANdC,cAMc,GANG,KAMH;AAAA,SAJdC,WAIc,GAJA,KAIA;AAAA,SAFdC,iBAEc,GAFM,KAEN;;AAAA,SAiDdC,iBAjDc,GAiDMC,KAAK,IAAI;AAC3B,WAAKJ,cAAL,GAAsBI,KAAtB;AACD,KAnDa;;AAAA,SAqDdC,kBArDc,GAqDOD,KAAK,IAAI;AAC5B,WAAKR,eAAL,GAAuBQ,KAAvB;AACD,KAvDa;;AAAA,SAyDdE,kBAzDc,GAyDOF,KAAK,IAAI;AAC5B,WAAKT,eAAL,GAAuBS,KAAvB;AACD,KA3Da;;AAAA,SA6DdG,sBA7Dc,GA6DWH,KAAK,IAAI;AAChC,WAAKP,mBAAL,GAA2BO,KAA3B;AACD,KA/Da;;AAAA,SAiEdI,qBAjEc,GAiEUJ,KAAK,IAAI;AAC/B,WAAKN,kBAAL,GAA0BM,KAA1B;AACD,KAnEa;;AAAA,SAqEdK,kBArEc,GAqEOL,KAAK,IAAI;AAC5B,WAAKL,eAAL,GAAuBK,KAAvB;AACD,KAvEa;;AAAA,SAuGdM,YAvGc,GAuGCC,SAAS,IAAI;AAC1B,WAAKV,WAAL,GAAmBU,SAAnB;AACD,KAzGa;;AAAA,SA2GdC,eA3Gc,GA2GI,OAAOC,IAAP,EAAaC,YAAb,KAA8B;AAC9C,YAAMC,GAAG,GACP,8EADF;AAEA,YAAMC,eAAe,GACnB,mFADF;AAEAzC,MAAAA,KAAK,CACF0C,GADH,CACOD,eADP,EACwB,EADxB,EAEGE,IAFH,CAEQC,GAAG,IAAI;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;;AACA,YAAIA,GAAG,CAACN,IAAJ,GAAW,CAAf,EAAkB;AAChB,eAAKS,YAAL,CAAkBR,YAAlB,EAAgCC,GAAhC,EAAqCF,IAArC;AACD,SAFD,MAEO;AACLO,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,eAAKX,YAAL,CAAkB,IAAlB;AACD;AACF,OAVH,EAWGa,KAXH,CAWSC,GAAG,IAAI;AACZ,aAAKd,YAAL,CAAkB,IAAlB;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBG,GAAnB;AACD,OAdH;AAeD,KA/Ha;;AACZ;;;;;;;;;;;;;;;AAgBA/C,IAAAA,wBAAwB,GAAGyC,IAA3B,CAAgCO,OAAO,IAAI;AACzC,UAAIC,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,aAAK3C,YAAL,CAAkB6C,IAAlB,CAAuBJ,OAAO,CAACE,CAAD,CAAP,IAAc,EAArC;AACD;;AACD,WAAK1C,OAAL,GAAe,IAAf;AACA,YAAM6C,SAAS,GAAGL,OAAO,CAACM,GAAR,CAAYC,IAAI,IAAIA,IAAI,CAACC,EAAzB,CAAlB;AACAzD,MAAAA,wBAAwB,CAACsD,SAAS,CAACI,IAAV,CAAe,GAAf,CAAD,CAAxB,CAA8ChB,IAA9C,CAAmDO,OAAO,IAAI;AAC5D,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,eAAK7C,YAAL,CAAkB+C,IAAlB,CAAuBJ,OAAO,CAACE,CAAD,CAAP,IAAc,EAArC;AACD;;AACD,aAAK5C,OAAL,GAAe,IAAf;AACA,cAAMoD,OAAO,GAAGV,OAAO,CAACM,GAAR,CAAYC,IAAI,IAAIA,IAAI,CAACC,EAAzB,CAAhB;AACAvD,QAAAA,qBAAqB,CAACyD,OAAO,CAACD,IAAR,CAAa,GAAb,CAAD,CAArB,CAAyChB,IAAzC,CAA8CO,OAAO,IAAI;AACvD,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,iBAAKtC,UAAL,CAAgBwC,IAAhB,CAAqBJ,OAAO,CAACE,CAAD,CAAP,IAAc,EAAnC;AACD;;AACD,eAAKrC,OAAL,GAAe,IAAf;AACD,SALD;AAMD,OAZD;AAaD,KApBD,EAjBY,CAsCZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AA0BD8C,EAAAA,eAAe,CAAChC,KAAD,EAAQ;AACrB,SAAKpB,YAAL,GAAoB,CAAC,GAAGoB,KAAJ,CAApB;AACD;;AAEDiC,EAAAA,YAAY,CAACjC,KAAD,EAAQ;AAClB,SAAKlB,SAAL,GAAiB,CAAC,GAAGkB,KAAJ,CAAjB;AACD;;AAEDkC,EAAAA,YAAY,CAAClC,KAAD,EAAQ;AAClB,SAAKhB,SAAL,GAAiB,CAAC,GAAGgB,KAAJ,CAAjB;AACD;;AAEDmC,EAAAA,YAAY,CAACC,IAAD,EAAOpC,KAAP,EAAc;AACxB,SAAKX,SAAL,qBACK,KAAKA,SADV;AAEE,OAAC+C,IAAD,GAAQpC;AAFV;AAID;;AAEDqC,EAAAA,cAAc,CAACrC,KAAD,EAAQ;AACpB,SAAKtB,YAAL,GAAoB,CAAC,GAAGsB,KAAJ,CAApB;AACD;;AAEDsC,EAAAA,aAAa,CAACtC,KAAD,EAAQ;AACnB,SAAKuC,sBAAL,qBACK,KAAKlD,SADV;AAEE,OAAC+C,IAAD,GAAQpC;AAFV;AAID;;AA4BDkB,EAAAA,YAAY,CAACR,YAAD,EAAeC,GAAf,EAAoBF,IAApB,EAA0B;AACpCO,IAAAA,OAAO,CAACC,GAAR,WAAeN,GAAf,SAAqBF,IAArB;AAEA,UAAM+B,GAAG,GAAG,CAAC/B,IAAD,GAAQE,GAAR,aAAiBA,GAAjB,SAAuBF,IAAvB,CAAZ;AACAtC,IAAAA,KAAK,CACF0C,GADH,CACO2B,GADP,EACY,EADZ,EAEG1B,IAFH,CAEQC,GAAG,IAAI;AACX,UAAIA,GAAJ,EAAS;AACPC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA0B,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,aAA0BhC,GAA1B,SAAgCF,IAAhC;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAOF,GAAP;AACD;AACF,KATH,EAUGD,IAVH,CAUQC,GAAG,IAAI;AACX;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;AACD,KAfH,EAgBGI,KAhBH,CAgBSC,GAAG,IAAIJ,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBG,GAAnB,CAhBhB,EAiBGwB,OAjBH,CAiBW,MAAM;AACb;AACA5B,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KArBH;AAsBD;;AAjMiB;;AAoMpB3C,QAAQ,CAACS,aAAD,EAAgB;AACtBE,EAAAA,YAAY,EAAEV,UADQ;AAEtBW,EAAAA,OAAO,EAAEX,UAFa;AAGtBY,EAAAA,YAAY,EAAEZ,UAHQ;AAItBa,EAAAA,OAAO,EAAEb,UAJa;AAKtBc,EAAAA,SAAS,EAAEd,UALW;AAMtBkE,EAAAA,YAAY,EAAEjE,MAAM,CAAC4E,KANC;AAOtB7D,EAAAA,SAAS,EAAEhB,UAPW;AAQtBe,EAAAA,OAAO,EAAEf,UARa;AAStBiB,EAAAA,UAAU,EAAEjB,UATU;AAUtBkB,EAAAA,OAAO,EAAElB,UAVa;AAWtBmB,EAAAA,WAAW,EAAEnB,UAXS;AAYtBoB,EAAAA,OAAO,EAAEpB,UAZa;AAatBqB,EAAAA,SAAS,EAAErB,UAbW;AActB4B,EAAAA,cAAc,EAAE5B,UAdM;AAetB0B,EAAAA,kBAAkB,EAAE1B,UAfE;AAgBtByB,EAAAA,mBAAmB,EAAEzB,UAhBC;AAiBtBuB,EAAAA,eAAe,EAAEvB,UAjBK;AAkBtBwB,EAAAA,eAAe,EAAExB,UAlBK;AAmBtBwC,EAAAA,eAAe,EAAEvC,MAnBK;AAoBtBoE,EAAAA,cAAc,EAAEpE,MAAM,CAAC4E,KApBD;AAqBtBb,EAAAA,eAAe,EAAE/D,MAAM,CAAC4E,KArBF;AAsBtBZ,EAAAA,YAAY,EAAEhE,MAAM,CAAC4E,KAtBC;AAuBtBC,EAAAA,mBAAmB,EAAE7E,MAAM,CAAC4E,KAvBN;AAwBtBP,EAAAA,aAAa,EAAErE,MAAM,CAAC4E,KAxBA;AAyBtBV,EAAAA,YAAY,EAAElE,MAAM,CAAC4E,KAzBC;AA0BtB1C,EAAAA,sBAAsB,EAAElC,MAAM,CAAC4E,KA1BT;AA2BtB9C,EAAAA,iBAAiB,EAAE9B,MAAM,CAAC4E,KA3BJ;AA4BtB5C,EAAAA,kBAAkB,EAAEhC,MAAM,CAAC4E,KA5BL;AA6BtBzC,EAAAA,qBAAqB,EAAEnC,MAAM,CAAC4E,KA7BR;AA8BtB3C,EAAAA,kBAAkB,EAAEjC,MA9BE;AA+BtB4B,EAAAA,WAAW,EAAE7B,UA/BS;AAgCtBsC,EAAAA,YAAY,EAAErC,MAAM,CAAC4E,KAhCC,CAiCtB;AACA;;AAlCsB,CAAhB,CAAR;AAqCA,gBAAe,MAAM,IAAIrE,aAAJ,EAArB","sourcesContent":["import { decorate, observable, action, configure } from \"mobx\";\nimport axios from \"axios\";\nimport {\n  getFilterOptionsBuilding,\n  getFilterOptionsDistrict,\n  getFilterOptionsClass,\n  getCSVFile\n} from \"@/stores/wrd_apis\";\n\nclass ViewModeStore {\n  optBuildings = [];\n  isBdSet = false;\n\n  optDistricts = [];\n  isDsSet = false;\n\n  optEvents = [];\n  isEvSet = false;\n\n  optGrades = [];\n\n  optClasses = [];\n  isClSet = false;\n\n  optStudents = [];\n  isStSet = false;\n\n  postQuery = {};\n\n  errorData = [];\n\n  isGradeSelected = false;\n\n  isEventSelected = false;\n\n  isBuildingsSelected = false;\n\n  isDistrictSelected = false;\n\n  isClassSelected = false;\n\n  isTestSelected = false;\n\n  isEmptyData = false;\n\n  isConnectionError = false;\n\n  constructor() {\n    /*defaultConnection()\n    .then(res => {\n        if(res){\n        console.log(\"RES--\", res)\n            //return res.message\n        } else {\n            this.getData;\n        }\n    })\n    .catch(err => {\n    console.log(\"ERR--\",err)\n    //this.isConnectionError = true\n    //this.errorData.push(\"service is down\")\n    })\n*/\n\n    getFilterOptionsDistrict().then(options => {\n      let districts = [];\n      for (let i = 0; i < options.length; i++) {\n        this.optDistricts.push(options[i] || \"\");\n      }\n      this.isDsSet = true;\n      const buildings = options.map(item => item.id);\n      getFilterOptionsBuilding(buildings.join(\",\")).then(options => {\n        for (let i = 0; i < options.length; i++) {\n          this.optBuildings.push(options[i] || \"\");\n        }\n        this.isBdSet = true;\n        const classes = options.map(item => item.id);\n        getFilterOptionsClass(classes.join(\",\")).then(options => {\n          for (let i = 0; i < options.length; i++) {\n            this.optClasses.push(options[i] || \"\");\n          }\n          this.isClSet = true;\n        });\n      });\n    });\n    // student\n    //getFilterOptions('student')\n    //.then(options => {\n    //for (let i = 0; i < options.length; i++) {\n    // this.optStudents.push(options[i].name || '');\n    //}\n    // this.isStSet = true;\n    // });\n    // }\n  }\n\n  setIsTestSelected = value => {\n    this.isTestSelected = value;\n  };\n\n  setIsEventSelected = value => {\n    this.isEventSelected = value;\n  };\n\n  setIsGradeSelected = value => {\n    this.isGradeSelected = value;\n  };\n\n  setIsBuildingsSelected = value => {\n    this.isBuildingsSelected = value;\n  };\n\n  setIsDistrictSelected = value => {\n    this.isDistrictSelected = value;\n  };\n\n  setIsClassSelected = value => {\n    this.isClassSelected = value;\n  };\n\n  setDistrictsOpt(value) {\n    this.optDistricts = [...value];\n  }\n\n  setEventsOpt(value) {\n    this.optEvents = [...value];\n  }\n\n  setGradesOpt(value) {\n    this.optGrades = [...value];\n  }\n\n  setPostQuery(name, value) {\n    this.postQuery = {\n      ...this.postQuery,\n      [name]: value\n    };\n  }\n\n  setBuildingOpt(value) {\n    this.optBuildings = [...value];\n  }\n\n  setClassesOpt(value) {\n    this.optClassessetPostQuery = {\n      ...this.postQuery,\n      [name]: value\n    };\n  }\n\n  setEmptyData = condition => {\n    this.isEmptyData = condition;\n  };\n\n  getDownloadFile = async (data, setIsLoading) => {\n    const URL =\n      \"https://adaptive-file-extract-api-prod.rcs.rsiapps.com/adaptive/v1/research?\";\n    const checkingUrlData =\n      \"https://adaptive-file-extract-api-prod.rcs.rsiapps.com/adaptive/v1/research/count\";\n    axios\n      .get(checkingUrlData, {})\n      .then(res => {\n        console.log(\"res\", res);\n        if (res.data > 0) {\n          this.downloadFile(setIsLoading, URL, data);\n        } else {\n          console.log(\"No Record found of given search\");\n          this.setEmptyData(true);\n        }\n      })\n      .catch(err => {\n        this.setEmptyData(true);\n        console.log(\"ERR\", err);\n      });\n  };\n\n  downloadFile(setIsLoading, URL, data) {\n    console.log(`${URL}${data}`);\n\n    const URI = !data ? URL : `${URL}${data}`;\n    axios\n      .get(URI, {})\n      .then(res => {\n        if (res) {\n          console.log(\"res\", res);\n          window.location.href = `${URL}${data}`;\n          console.log(\"href\");\n          return res;\n        }\n      })\n      .then(res => {\n        //console.log(\"data\", data)\n        //window.open(`${URL}${data}`, \"_blanc\");\n        //window.location.href = URL;\n        console.log(\"res2\", res);\n      })\n      .catch(err => console.log(\"err\", err))\n      .finally(() => {\n        //window.open(URI, \"_blanc\");\n        console.log(\"finally\");\n        setIsLoading(false);\n      });\n  }\n}\n\ndecorate(ViewModeStore, {\n  optBuildings: observable,\n  isBdSet: observable,\n  optDistricts: observable,\n  isDsSet: observable,\n  optEvents: observable,\n  setGradesOpt: action.bound,\n  optGrades: observable,\n  isEvSet: observable,\n  optClasses: observable,\n  isClSet: observable,\n  optStudents: observable,\n  isStSet: observable,\n  postQuery: observable,\n  isTestSelected: observable,\n  isDistrictSelected: observable,\n  isBuildingsSelected: observable,\n  isGradeSelected: observable,\n  isEventSelected: observable,\n  getDownloadFile: action,\n  setBuildingOpt: action.bound,\n  setDistrictsOpt: action.bound,\n  setEventsOpt: action.bound,\n  setIsEventsSelected: action.bound,\n  setClassesOpt: action.bound,\n  setPostQuery: action.bound,\n  setIsBuildingsSelected: action.bound,\n  setIsTestSelected: action.bound,\n  setIsEventSelected: action.bound,\n  setIsDistrictSelected: action.bound,\n  setIsGradeSelected: action,\n  isEmptyData: observable,\n  setEmptyData: action.bound\n  //isConnectionError: observable,\n  //errorData: action.bound\n});\n\nexport default () => new ViewModeStore();\n"]},"metadata":{},"sourceType":"module"}