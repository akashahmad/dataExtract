{"ast":null,"code":"import _defineProperty from \"/Users/brohik/repo/adaptive-data-file-extract/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { decorate, observable, action, configure } from \"mobx\";\nimport axios from \"axios\";\nimport { getFilterOptionsBuilding, getFilterOptionsDistrict, getFilterOptionsClass, getFilterOptionsEvent //defaultConnection,\n, getCSVFile } from \"@/stores/wrd_apis\";\n\nclass ViewModeStore {\n  constructor() {\n    this.optBuildings = [];\n    this.isBdSet = false;\n    this.optDistricts = [];\n    this.isDsSet = false;\n    this.optEvents = [];\n    this.isEvSet = false;\n    this.optClasses = [];\n    this.isClSet = false;\n    this.optGrade = [];\n    this.isGradeSet = false;\n    this.optStudents = [];\n    this.isStSet = false;\n    this.postQuery = {};\n    this.errorData = [];\n    this.isGradeSelected = false;\n    this.isBuildingsSelected = false;\n    this.isDistrictSelected = false;\n    this.isClassSelected = false;\n    this.isEmptyData = false;\n    this.isConnectionError = false;\n\n    this.setIsGradeSelected = value => {\n      this.isGradeSelected = value;\n    };\n\n    this.setIsBuildingsSelected = value => {\n      this.isBuildingsSelected = value;\n    };\n\n    this.setIsDistrictSelected = value => {\n      this.isDistrictSelected = value;\n    };\n\n    this.setIsClassSelected = value => {\n      this.isClassSelected = value;\n    };\n\n    this.setEmptyData = condition => {\n      this.isEmptyData = condition;\n    };\n\n    this.getDownloadFile = async (data, setIsLoading) => {\n      const URL = \"https://adaptive-file-extract-api-prod.rcs.rsiapps.com/adaptive/v1/research?\"; //const checkingUrlData = \"https://adaptive-file-extract-api-prod.rcs.rsiapps.com/adaptive/v1/research/count\"\n      // axios.get(checkingUrlData, {}).then((res) => {\n      //  console.log(\"res\", res);\n      //    if (res.data > 0) {\n\n      this.downloadFile(setIsLoading, URL, data); //  } else {\n      //    console.log(\"No Record found of given search\")\n      //    this.setEmptyData(true);\n      //  }\n      //}).catch(err => {\n      //  this.setEmptyData(true);\n      //  console.log(\"ERR\" , err)\n      //})\n    };\n\n    /*defaultConnection()\n    .then(res => {\n        if(res){\n        console.log(\"RES--\", res)\n            //return res.message\n        } else {\n            this.getData;\n        }\n    })\n    .catch(err => {\n     console.log(\"ERR--\",err)\n    //this.isConnectionError = true\n    //this.errorData.push(\"service is down\")\n     })\n    */\n    // const getData = () => {\n    getFilterOptionsEvent().then(options => {\n      this.optEvents = [...options]; //   for (let i = 0; i < options.length; i++) {\n      //    this.optEvents.push(options[i] || \"\");\n      //  }\n\n      this.isEvSet = true;\n    });\n    getFilterOptionsDistrict().then(options => {\n      let districts = [];\n\n      for (let i = 0; i < options.length; i++) {\n        this.optDistricts.push(options[i] || \"\");\n      }\n\n      this.isDsSet = true;\n      const buildings = options.map(item => item.id);\n      getFilterOptionsBuilding(buildings.join(\",\")).then(options => {\n        for (let i = 0; i < options.length; i++) {\n          this.optBuildings.push(options[i] || \"\");\n        }\n\n        this.isBdSet = true;\n        const classes = options.map(item => item.id);\n        getFilterOptionsClass(classes.join(\",\")).then(options => {\n          for (let i = 0; i < options.length; i++) {\n            this.optClasses.push(options[i] || \"\");\n          }\n\n          this.isClSet = true;\n        });\n      });\n    }); // student\n    //getFilterOptions('student')\n    //.then(options => {\n    //for (let i = 0; i < options.length; i++) {\n    // this.optStudents.push(options[i].name || '');\n    //}\n    // this.isStSet = true;\n    // });\n    // }\n  }\n\n  setDistrictsOpt(value) {\n    this.optDistricts = [...value];\n  }\n\n  setPostQuery(name, value) {\n    this.postQuery = _objectSpread({}, this.postQuery, {\n      [name]: value\n    });\n  }\n\n  setBuildingOpt(value) {\n    this.optBuildings = [...value];\n  }\n\n  setGradeOpt(value) {\n    this.optGrade = [...value];\n  }\n\n  setIsEventsSelected(value) {\n    this.optEvents = value;\n  }\n\n  setClassesOpt(value) {\n    this.optClassessetPostQuery = _objectSpread({}, this.postQuery, {\n      [name]: value\n    });\n  }\n\n  downloadFile(setIsLoading, URL, data) {\n    console.log(\"\".concat(URL).concat(data));\n    const URI = !data ? URL : \"\".concat(URL).concat(data);\n    axios.get(URI, {}).then(res => {\n      if (res) {\n        console.log(\"res\", res);\n        window.location.href = \"\".concat(URL).concat(data);\n        console.log(\"href\");\n        return res;\n      }\n    }).then(res => {\n      //console.log(\"data\", data)\n      //window.open(`${URL}${data}`, \"_blanc\");\n      //window.location.href = URL;\n      console.log(\"res2\", res);\n    }).catch(err => console.log(\"err\", err)).finally(() => {\n      //window.open(URI, \"_blanc\");\n      console.log(\"finally\");\n      setIsLoading(false);\n    });\n  }\n\n}\n\ndecorate(ViewModeStore, {\n  optBuildings: observable,\n  isBdSet: observable,\n  optDistricts: observable,\n  isDsSet: observable,\n  optEvents: observable,\n  isEvSet: observable,\n  optClasses: observable,\n  isClSet: observable,\n  optStudents: observable,\n  isStSet: observable,\n  postQuery: observable,\n  isDistrictSelected: observable,\n  isBuildingsSelected: observable,\n  isGradeSelected: observable,\n  getDownloadFile: action,\n  setBuildingOpt: action.bound,\n  setGradeOpt: action.bound,\n  setDistrictsOpt: action.bound,\n  setIsEventsSelected: action.bound,\n  setClassesOpt: action.bound,\n  setPostQuery: action.bound,\n  setIsBuildingsSelected: action.bound,\n  setIsDistrictSelected: action.bound,\n  setIsGradeSelected: action,\n  isEmptyData: observable,\n  setEmptyData: action.bound //isConnectionError: observable,\n  //errorData: action.bound\n\n});\nexport default (() => new ViewModeStore());","map":{"version":3,"sources":["/Users/brohik/repo/adaptive-data-file-extract/src/stores/ViewModeStore.js"],"names":["decorate","observable","action","configure","axios","getFilterOptionsBuilding","getFilterOptionsDistrict","getFilterOptionsClass","getFilterOptionsEvent","getCSVFile","ViewModeStore","constructor","optBuildings","isBdSet","optDistricts","isDsSet","optEvents","isEvSet","optClasses","isClSet","optGrade","isGradeSet","optStudents","isStSet","postQuery","errorData","isGradeSelected","isBuildingsSelected","isDistrictSelected","isClassSelected","isEmptyData","isConnectionError","setIsGradeSelected","value","setIsBuildingsSelected","setIsDistrictSelected","setIsClassSelected","setEmptyData","condition","getDownloadFile","data","setIsLoading","URL","downloadFile","then","options","districts","i","length","push","buildings","map","item","id","join","classes","setDistrictsOpt","setPostQuery","name","setBuildingOpt","setGradeOpt","setIsEventsSelected","setClassesOpt","optClassessetPostQuery","console","log","URI","get","res","window","location","href","catch","err","finally","bound"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,MAA/B,EAAuCC,SAAvC,QAAwD,MAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,qBAHF,EAIEC,qBAJF,CAKE;AALF,EAMEC,UANF,QAOO,mBAPP;;AASA,MAAMC,aAAN,CAAoB;AAoClBC,EAAAA,WAAW,GAAG;AAAA,SAlCdC,YAkCc,GAlCC,EAkCD;AAAA,SAjCdC,OAiCc,GAjCJ,KAiCI;AAAA,SA/BdC,YA+Bc,GA/BC,EA+BD;AAAA,SA9BdC,OA8Bc,GA9BJ,KA8BI;AAAA,SA5BdC,SA4Bc,GA5BF,EA4BE;AAAA,SA3BdC,OA2Bc,GA3BJ,KA2BI;AAAA,SAzBdC,UAyBc,GAzBD,EAyBC;AAAA,SAxBdC,OAwBc,GAxBJ,KAwBI;AAAA,SAtBdC,QAsBc,GAtBH,EAsBG;AAAA,SArBdC,UAqBc,GArBD,KAqBC;AAAA,SAnBdC,WAmBc,GAnBA,EAmBA;AAAA,SAlBdC,OAkBc,GAlBJ,KAkBI;AAAA,SAhBdC,SAgBc,GAhBF,EAgBE;AAAA,SAddC,SAcc,GAdF,EAcE;AAAA,SAZdC,eAYc,GAZI,KAYJ;AAAA,SAVdC,mBAUc,GAVQ,KAUR;AAAA,SARdC,kBAQc,GARO,KAQP;AAAA,SANdC,eAMc,GANI,KAMJ;AAAA,SAJdC,WAIc,GAJA,KAIA;AAAA,SAFdC,iBAEc,GAFM,KAEN;;AAAA,SA4DdC,kBA5Dc,GA4DQC,KAAD,IAAW;AAC9B,WAAKP,eAAL,GAAuBO,KAAvB;AACD,KA9Da;;AAAA,SAgEdC,sBAhEc,GAgEYD,KAAD,IAAW;AAClC,WAAKN,mBAAL,GAA2BM,KAA3B;AACD,KAlEa;;AAAA,SAoEdE,qBApEc,GAoEWF,KAAD,IAAW;AACjC,WAAKL,kBAAL,GAA0BK,KAA1B;AACD,KAtEa;;AAAA,SAwEdG,kBAxEc,GAwEQH,KAAD,IAAW;AAC9B,WAAKJ,eAAL,GAAuBI,KAAvB;AACD,KA1Ea;;AAAA,SA0GdI,YA1Gc,GA0GEC,SAAD,IAAe;AAC5B,WAAKR,WAAL,GAAmBQ,SAAnB;AACD,KA5Ga;;AAAA,SA8GdC,eA9Gc,GA8GI,OAAOC,IAAP,EAAaC,YAAb,KAA8B;AAC9C,YAAMC,GAAG,GAAG,8EAAZ,CAD8C,CAE9C;AACD;AACC;AACF;;AACM,WAAKC,YAAL,CAAkBF,YAAlB,EAAgCC,GAAhC,EAAqCF,IAArC,EAN0C,CAO9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA7Ha;;AACZ;;;;;;;;;;;;;;;AAiBD;AACIhC,IAAAA,qBAAqB,GAAGoC,IAAxB,CAA6BC,OAAO,IAAI;AACxC,WAAK7B,SAAL,GAAiB,CAAC,GAAG6B,OAAJ,CAAjB,CADwC,CAExC;AACA;AACA;;AAEE,WAAK5B,OAAL,GAAe,IAAf;AACD,KAPD;AASHX,IAAAA,wBAAwB,GAAGsC,IAA3B,CAAgCC,OAAO,IAAI;AACzC,UAAIC,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,aAAKjC,YAAL,CAAkBmC,IAAlB,CAAuBJ,OAAO,CAACE,CAAD,CAAP,IAAc,EAArC;AACD;;AACD,WAAKhC,OAAL,GAAe,IAAf;AACA,YAAMmC,SAAS,GAAGL,OAAO,CAACM,GAAR,CAAYC,IAAI,IAAIA,IAAI,CAACC,EAAzB,CAAlB;AACAhD,MAAAA,wBAAwB,CAAC6C,SAAS,CAACI,IAAV,CAAe,GAAf,CAAD,CAAxB,CAA8CV,IAA9C,CAAmDC,OAAO,IAAI;AAC5D,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,eAAKnC,YAAL,CAAkBqC,IAAlB,CAAuBJ,OAAO,CAACE,CAAD,CAAP,IAAc,EAArC;AACD;;AACD,aAAKlC,OAAL,GAAe,IAAf;AACA,cAAM0C,OAAO,GAAGV,OAAO,CAACM,GAAR,CAAYC,IAAI,IAAIA,IAAI,CAACC,EAAzB,CAAhB;AACA9C,QAAAA,qBAAqB,CAACgD,OAAO,CAACD,IAAR,CAAa,GAAb,CAAD,CAArB,CAAyCV,IAAzC,CAA8CC,OAAO,IAAI;AACvD,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,iBAAK7B,UAAL,CAAgB+B,IAAhB,CAAqBJ,OAAO,CAACE,CAAD,CAAP,IAAc,EAAnC;AACD;;AACD,eAAK5B,OAAL,GAAe,IAAf;AACD,SALD;AAMD,OAZD;AAaD,KApBD,EA5BY,CAiDZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACA;;AAkBDqC,EAAAA,eAAe,CAACvB,KAAD,EAAQ;AACrB,SAAKnB,YAAL,GAAoB,CAAC,GAAGmB,KAAJ,CAApB;AACD;;AACDwB,EAAAA,YAAY,CAACC,IAAD,EAAOzB,KAAP,EAAc;AACxB,SAAKT,SAAL,qBACK,KAAKA,SADV;AAEE,OAACkC,IAAD,GAAQzB;AAFV;AAID;;AAGD0B,EAAAA,cAAc,CAAC1B,KAAD,EAAQ;AACpB,SAAKrB,YAAL,GAAoB,CAAC,GAAGqB,KAAJ,CAApB;AACD;;AAEH2B,EAAAA,WAAW,CAAC3B,KAAD,EAAQ;AACf,SAAKb,QAAL,GAAgB,CAAC,GAAGa,KAAJ,CAAhB;AACD;;AAEC4B,EAAAA,mBAAmB,CAAC5B,KAAD,EAAQ;AACzB,SAAKjB,SAAL,GAAiBiB,KAAjB;AACD;;AAEH6B,EAAAA,aAAa,CAAC7B,KAAD,EAAQ;AACnB,SAAK8B,sBAAL,qBACK,KAAKvC,SADV;AAEE,OAACkC,IAAD,GAAQzB;AAFV;AAID;;AAuBDU,EAAAA,YAAY,CAACF,YAAD,EAAeC,GAAf,EAAoBF,IAApB,EAA0B;AACtCwB,IAAAA,OAAO,CAACC,GAAR,WAAevB,GAAf,SAAqBF,IAArB;AAEA,UAAM0B,GAAG,GAAG,CAAC1B,IAAD,GAAQE,GAAR,aAAiBA,GAAjB,SAAuBF,IAAvB,CAAZ;AACEpC,IAAAA,KAAK,CAAC+D,GAAN,CAAUD,GAAV,EAAe,EAAf,EAEGtB,IAFH,CAESwB,GAAD,IAAS;AACb,UAAIA,GAAJ,EAAS;AACPJ,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBG,GAAnB;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,aAA0B7B,GAA1B,SAAgCF,IAAhC;AACAwB,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,eAAOG,GAAP;AACD;AACF,KATH,EAUGxB,IAVH,CAUSwB,GAAD,IAAS;AACb;AACA;AACA;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBG,GAApB;AACD,KAfH,EAgBGI,KAhBH,CAgBSC,GAAG,IAAIT,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBQ,GAAnB,CAhBhB,EAiBGC,OAjBH,CAiBW,MAAM;AACd;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACCxB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KArBH;AAsBD;;AA7LiB;;AAiMpBzC,QAAQ,CAACU,aAAD,EAAgB;AACtBE,EAAAA,YAAY,EAAEX,UADQ;AAEtBY,EAAAA,OAAO,EAAEZ,UAFa;AAGtBa,EAAAA,YAAY,EAAEb,UAHQ;AAItBc,EAAAA,OAAO,EAAEd,UAJa;AAKtBe,EAAAA,SAAS,EAAEf,UALW;AAMtBgB,EAAAA,OAAO,EAAEhB,UANa;AAOtBiB,EAAAA,UAAU,EAAEjB,UAPU;AAQtBkB,EAAAA,OAAO,EAAElB,UARa;AAStBqB,EAAAA,WAAW,EAAErB,UATS;AAUtBsB,EAAAA,OAAO,EAAEtB,UAVa;AAWtBuB,EAAAA,SAAS,EAAEvB,UAXW;AAYtB2B,EAAAA,kBAAkB,EAAE3B,UAZE;AAatB0B,EAAAA,mBAAmB,EAAE1B,UAbC;AActByB,EAAAA,eAAe,EAAEzB,UAdK;AAetBsC,EAAAA,eAAe,EAAErC,MAfK;AAgBtByD,EAAAA,cAAc,EAAEzD,MAAM,CAACyE,KAhBD;AAiBtBf,EAAAA,WAAW,EAAE1D,MAAM,CAACyE,KAjBE;AAkBtBnB,EAAAA,eAAe,EAAEtD,MAAM,CAACyE,KAlBF;AAmBtBd,EAAAA,mBAAmB,EAAE3D,MAAM,CAACyE,KAnBN;AAoBtBb,EAAAA,aAAa,EAAE5D,MAAM,CAACyE,KApBA;AAqBtBlB,EAAAA,YAAY,EAAEvD,MAAM,CAACyE,KArBC;AAsBtBzC,EAAAA,sBAAsB,EAAEhC,MAAM,CAACyE,KAtBT;AAuBtBxC,EAAAA,qBAAqB,EAAEjC,MAAM,CAACyE,KAvBR;AAwBtB3C,EAAAA,kBAAkB,EAAE9B,MAxBE;AAyBtB4B,EAAAA,WAAW,EAAE7B,UAzBS;AA0BtBoC,EAAAA,YAAY,EAAEnC,MAAM,CAACyE,KA1BC,CA2BtB;AACA;;AA5BsB,CAAhB,CAAR;AA+BA,gBAAe,MAAM,IAAIjE,aAAJ,EAArB","sourcesContent":["import { decorate, observable, action, configure } from \"mobx\";\nimport axios from \"axios\";\nimport {\n  getFilterOptionsBuilding,\n  getFilterOptionsDistrict,\n  getFilterOptionsClass,\n  getFilterOptionsEvent,\n  //defaultConnection,\n  getCSVFile\n} from \"@/stores/wrd_apis\";\n\nclass ViewModeStore {\n\n  optBuildings = [];\n  isBdSet = false;\n\n  optDistricts = [];\n  isDsSet = false;\n\n  optEvents = [];\n  isEvSet = false;\n\n  optClasses = [];\n  isClSet = false;\n\n  optGrade = [];\n  isGradeSet = false;\n\n  optStudents = [];\n  isStSet = false;\n\n  postQuery = {};\n\n  errorData = []\n\n  isGradeSelected = false;\n\n  isBuildingsSelected = false;\n\n  isDistrictSelected = false;\n\n  isClassSelected = false;\n\n  isEmptyData = false;\n\n  isConnectionError = false;\n\n  constructor() {\n    /*defaultConnection()\n    .then(res => {\n        if(res){\n        console.log(\"RES--\", res)\n            //return res.message\n        } else {\n            this.getData;\n        }\n    })\n    .catch(err => {\n\n    console.log(\"ERR--\",err)\n    //this.isConnectionError = true\n    //this.errorData.push(\"service is down\")\n\n    })\n*/\n   // const getData = () => {\n       getFilterOptionsEvent().then(options => {\n       this.optEvents = [...options]\n       //   for (let i = 0; i < options.length; i++) {\n       //    this.optEvents.push(options[i] || \"\");\n       //  }\n\n         this.isEvSet = true;\n       });\n\n    getFilterOptionsDistrict().then(options => {\n      let districts = [];\n      for (let i = 0; i < options.length; i++) {\n        this.optDistricts.push(options[i] || \"\");\n      }\n      this.isDsSet = true;\n      const buildings = options.map(item => item.id);\n      getFilterOptionsBuilding(buildings.join(\",\")).then(options => {\n        for (let i = 0; i < options.length; i++) {\n          this.optBuildings.push(options[i] || \"\");\n        }\n        this.isBdSet = true;\n        const classes = options.map(item => item.id);\n        getFilterOptionsClass(classes.join(\",\")).then(options => {\n          for (let i = 0; i < options.length; i++) {\n            this.optClasses.push(options[i] || \"\");\n          }\n          this.isClSet = true;\n        });\n      });\n    });\n    // student\n    //getFilterOptions('student')\n    //.then(options => {\n    //for (let i = 0; i < options.length; i++) {\n    // this.optStudents.push(options[i].name || '');\n    //}\n    // this.isStSet = true;\n    // });\n   // }\n  }\n\n  setIsGradeSelected = (value) => {\n    this.isGradeSelected = value;\n  };\n\n  setIsBuildingsSelected = (value) => {\n    this.isBuildingsSelected = value;\n  };\n\n  setIsDistrictSelected = (value) => {\n    this.isDistrictSelected = value;\n  };\n\n  setIsClassSelected = (value) => {\n    this.isClassSelected = value;\n  };\n\n  setDistrictsOpt(value) {\n    this.optDistricts = [...value];\n  }\n  setPostQuery(name, value) {\n    this.postQuery = {\n      ...this.postQuery,\n      [name]: value\n    };\n  }\n\n\n  setBuildingOpt(value) {\n    this.optBuildings = [...value];\n  }\n\nsetGradeOpt(value) {\n    this.optGrade = [...value];\n  }\n\n    setIsEventsSelected(value) {\n      this.optEvents = value;\n    }\n\n  setClassesOpt(value) {\n    this.optClassessetPostQuery= {\n      ...this.postQuery,\n      [name]: value\n    };\n  }\n\n  setEmptyData = (condition) => {\n    this.isEmptyData = condition;\n  }\n\n  getDownloadFile = async (data, setIsLoading) => {\n    const URL = \"https://adaptive-file-extract-api-prod.rcs.rsiapps.com/adaptive/v1/research?\"\n    //const checkingUrlData = \"https://adaptive-file-extract-api-prod.rcs.rsiapps.com/adaptive/v1/research/count\"\n   // axios.get(checkingUrlData, {}).then((res) => {\n    //  console.log(\"res\", res);\n  //    if (res.data > 0) {\n        this.downloadFile(setIsLoading, URL, data)\n    //  } else {\n    //    console.log(\"No Record found of given search\")\n    //    this.setEmptyData(true);\n    //  }\n    //}).catch(err => {\n    //  this.setEmptyData(true);\n    //  console.log(\"ERR\" , err)\n    //})\n  }\n\n  downloadFile(setIsLoading, URL, data) {\n  console.log(`${URL}${data}`)\n\n  const URI = !data ? URL : `${URL}${data}`\n    axios.get(URI, {\n    })\n      .then((res) => {\n        if (res) {\n          console.log(\"res\", res)\n          window.location.href = `${URL}${data}`\n          console.log(\"href\")\n          return res\n        }\n      })\n      .then((res) => {\n        //console.log(\"data\", data)\n        //window.open(`${URL}${data}`, \"_blanc\");\n        //window.location.href = URL;\n        console.log(\"res2\", res)\n      })\n      .catch(err => console.log(\"err\", err))\n      .finally(() => {\n       //window.open(URI, \"_blanc\");\n       console.log(\"finally\")\n        setIsLoading(false)\n      })\n  }\n\n}\n\ndecorate(ViewModeStore, {\n  optBuildings: observable,\n  isBdSet: observable,\n  optDistricts: observable,\n  isDsSet: observable,\n  optEvents: observable,\n  isEvSet: observable,\n  optClasses: observable,\n  isClSet: observable,\n  optStudents: observable,\n  isStSet: observable,\n  postQuery: observable,\n  isDistrictSelected: observable,\n  isBuildingsSelected: observable,\n  isGradeSelected: observable,\n  getDownloadFile: action,\n  setBuildingOpt: action.bound,\n  setGradeOpt: action.bound,\n  setDistrictsOpt: action.bound,\n  setIsEventsSelected: action.bound,\n  setClassesOpt: action.bound,\n  setPostQuery: action.bound,\n  setIsBuildingsSelected: action.bound,\n  setIsDistrictSelected: action.bound,\n  setIsGradeSelected: action,\n  isEmptyData: observable,\n  setEmptyData: action.bound\n  //isConnectionError: observable,\n  //errorData: action.bound\n});\n\nexport default () => new ViewModeStore();\n"]},"metadata":{},"sourceType":"module"}