{"ast":null,"code":"import _slicedToArray from \"/Users/brohik/repo/adaptive-data-file-extract/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/brohik/repo/adaptive-data-file-extract/src/components/MultipleSelect/index.js\";\nimport React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport { inject, observer } from \"mobx-react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Select from \"@material-ui/core/Select\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { STORE_KEYS } from \"@/stores\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"100%\"\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  chip: {\n    margin: 2\n  },\n  noLabel: {\n    marginTop: theme.spacing(3)\n  }\n}));\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\n\nconst MultipleSelect = ({\n  name,\n  options,\n  isSet,\n  setOptions,\n  getDataFromServer,\n  setPostQuery,\n  disabled,\n  setFlag\n}) => {\n  const classes = useStyles();\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        nameItem = _React$useState2[0],\n        setNameItem = _React$useState2[1];\n\n  const handleChange = async e => {\n    const value = e.target.value;\n    setNameItem(value);\n    const idsValue = options.reduce((result, item) => {\n      if (value.includes(item.name)) {\n        return [...result, item.id];\n      }\n\n      return result;\n    }, []);\n\n    if (getDataFromServer) {\n      const data = await getDataFromServer(idsValue.join(\",\"));\n      setOptions(data);\n      value.length ? setFlag(true) : setFlag(false);\n    }\n\n    setPostQuery(name, idsValue.join(\",\"));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    id: \"demo-mutiple-checkbox-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Data by \".concat(name)), React.createElement(Select, {\n    labelId: \"demo-mutiple-checkbox-label\",\n    id: \"demo-mutiple-checkbox\",\n    multiple: true,\n    value: nameItem,\n    onChange: handleChange,\n    input: React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }),\n    renderValue: selected => selected.join(\", \"),\n    MenuProps: MenuProps,\n    disabled: disabled,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, options.map(item => React.createElement(MenuItem, {\n    key: item.name,\n    value: item.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Checkbox, {\n    checked: nameItem.indexOf(item.name) > -1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(ListItemText, {\n    primary: item.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }))))));\n};\n\nexport default compose(inject(STORE_KEYS.VIEWMODESTORE), observer, withProps(({\n  [STORE_KEYS.VIEWMODESTORE]: {\n    setPostQuery\n  }\n}) => ({\n  setPostQuery\n})))(MultipleSelect);","map":{"version":3,"sources":["/Users/brohik/repo/adaptive-data-file-extract/src/components/MultipleSelect/index.js"],"names":["React","compose","withProps","inject","observer","makeStyles","Input","InputLabel","MenuItem","FormControl","ListItemText","Select","Checkbox","STORE_KEYS","useStyles","theme","formControl","margin","spacing","width","chips","display","flexWrap","chip","noLabel","marginTop","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","MultipleSelect","name","options","isSet","setOptions","getDataFromServer","setPostQuery","disabled","setFlag","classes","useState","nameItem","setNameItem","handleChange","e","value","target","idsValue","reduce","result","item","includes","id","data","join","length","selected","map","indexOf","VIEWMODESTORE"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport { inject, observer } from \"mobx-react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Input from \"@material-ui/core/Input\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Select from \"@material-ui/core/Select\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport { STORE_KEYS } from \"@/stores\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"100%\"\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  chip: {\n    margin: 2\n  },\n  noLabel: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250\n    }\n  }\n};\n\nconst MultipleSelect = ({\n  name,\n  options,\n  isSet,\n  setOptions,\n  getDataFromServer,\n  setPostQuery,\n  disabled,\n  setFlag\n}) => {\n  const classes = useStyles();\n  const [nameItem, setNameItem] = React.useState([]);\n\n  const handleChange = async e => {\n    const value = e.target.value;\n    setNameItem(value);\n    const idsValue = options.reduce((result, item) => {\n      if (value.includes(item.name)) {\n        return [...result, item.id];\n      }\n      return result;\n    }, []);\n    if (getDataFromServer) {\n      const data = await getDataFromServer(idsValue.join(\",\"));\n      setOptions(data);\n      value.length ? setFlag(true) : setFlag(false);\n    }\n    setPostQuery(name, idsValue.join(\",\"));\n  };\n\n  return (\n    <div>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-mutiple-checkbox-label\">\n          {`Data by ${name}`}\n        </InputLabel>\n        <Select\n          labelId=\"demo-mutiple-checkbox-label\"\n          id=\"demo-mutiple-checkbox\"\n          multiple\n          value={nameItem}\n          onChange={handleChange}\n          input={<Input />}\n          renderValue={selected => selected.join(\", \")}\n          MenuProps={MenuProps}\n          disabled={disabled}\n        >\n          {options.map(item => (\n            <MenuItem key={item.name} value={item.name}>\n              <Checkbox checked={nameItem.indexOf(item.name) > -1} />\n              <ListItemText primary={item.name} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default compose(\n  inject(STORE_KEYS.VIEWMODESTORE),\n  observer,\n  withProps(({ [STORE_KEYS.VIEWMODESTORE]: { setPostQuery } }) => ({\n    setPostQuery\n  }))\n)(MultipleSelect);\n"]},"metadata":{},"sourceType":"module"}